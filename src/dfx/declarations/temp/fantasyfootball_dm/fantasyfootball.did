type Users = 
 vec record {
       Key;
       User__1;
     };
type User__1 = 
 record {
   email: text;
   joiningDate: int;
   name: text;
   role: Role;
 };
type UserAssets__1 = 
 record {
   contestWon: nat;
   participated: nat;
   rewardsWon: nat;
   totalEarning: nat;
 };
type UserAssets = 
 record {
   contestWon: nat;
   participated: nat;
   rewardsWon: nat;
   totalEarning: nat;
 };
type User = 
 record {
   email: text;
   joiningDate: int;
   name: text;
   role: Role;
 };
type TransformArgs = 
 record {
   context: blob;
   response: HttpResponsePayload;
 };
type TransferFromError = 
 variant {
   BadBurn: record {min_burn_amount: Icrc1Tokens;};
   BadFee: record {expected_fee: Icrc1Tokens;};
   CreatedInFuture: record {ledger_time: Icrc1Timestamp;};
   Duplicate: record {duplicate_of: Icrc1BlockIndex;};
   GenericError: record {
                   error_code: nat;
                   message: text;
                 };
   InsufficientAllowance: record {allowance: Icrc1Tokens;};
   InsufficientFunds: record {balance: Icrc1Tokens;};
   TemporarilyUnavailable;
   TooOld;
 };
type Transfer = 
 record {
   isActive: bool;
   player: IPlayer;
   playerId: MonkeyId;
   teamId: MonkeyId;
 };
type Tournaments = 
 vec record {
       Key;
       Tournament;
     };
type Tournament__1 = 
 record {
   country: text;
   description: text;
   endDate: int;
   name: text;
   providerId: MonkeyId;
   startDate: int;
 };
type Tournament = 
 record {
   country: text;
   description: text;
   endDate: int;
   name: text;
   providerId: MonkeyId;
   startDate: int;
 };
type TopPlayers = 
 vec record {
       Key;
       TopPlayer;
     };
type TopPlayer = 
 record {
   assets: UserAssets;
   email: text;
   joiningDate: int;
   name: text;
   role: Role;
 };
type Teams = 
 vec record {
       Key;
       Team__1;
     };
type Team__1 = 
 record {
   logo: text;
   name: text;
   providerId: MonkeyId;
   seasonId: Key;
   shortName: text;
 };
type Team = 
 record {
   logo: text;
   name: text;
   providerId: MonkeyId;
   seasonId: Key;
   shortName: text;
 };
type Shots = 
 record {
   shots_on_goal: int;
   shots_total: int;
 };
type Seasons = 
 vec record {
       Key;
       Season;
     };
type Season__1 = 
 record {
   endDate: int;
   providerId: MonkeyId;
   seasonName: text;
   startDate: int;
   tournamentId: Key;
 };
type Season = 
 record {
   endDate: int;
   providerId: MonkeyId;
   seasonName: text;
   startDate: int;
   tournamentId: Key;
 };
type Role = 
 variant {
   admin;
   user;
 };
type ReturnTournaments = 
 record {
   total: nat;
   tournaments: Tournaments;
 };
type ReturnTeams = 
 record {
   teams: RawPlayerSquads;
   total: nat;
 };
type ReturnSeasons = 
 record {
   seasons: Seasons;
   total: nat;
 };
type ReturnRankings = 
 record {
   rankings: RefinedPlayerSquadRankings;
   total: nat;
   userRank: opt record {
                   Key__1;
                   RefinedPlayerSquadRanking__1;
                 };
 };
type ReturnPagContests = 
 record {
   contests: vec record {
                   Key__1;
                   ContestWithFirstPrize;
                 };
   total: nat;
 };
type ReturnMatches = 
 record {
   matches: RTournamentMatches;
   total: nat;
 };
type ReturnDetailedMatchContests = 
 record {
   matches: DetailedMatchContests;
   total: nat;
 };
type ReturnContests = 
 record {
   contests: MatchContests;
   total: nat;
 };
type ReturnAdminSettings = 
 record {
   settings: AdminSettings;
   total: nat;
 };
type ReturnAddParticipant = 
 variant {
   err: TransferFromError;
   ok: text;
 };
type Result_7 = 
 variant {
   err: record {
          text;
          bool;
        };
   ok: record {
         text;
         Match;
       };
 };
type Result_6 = 
 variant {
   err: record {
          text;
          bool;
        };
   ok: record {
         text;
         bool;
       };
 };
type Result_5 = 
 variant {
   err: text;
   ok: Players;
 };
type Result_4 = 
 variant {
   err: text;
   ok: record {
         Players;
         PlayerCount;
       };
 };
type Result_3 = 
 variant {
   err: text;
   ok: record {
         Teams;
         nat;
       };
 };
type Result_2 = 
 variant {
   err: text;
   ok: text;
 };
type Result_1 = 
 variant {
   err: text;
   ok: record {
         message: text;
         squad: opt PlayerSquad;
       };
 };
type Result = 
 variant {
   err: text;
   ok: record {
         text;
         opt User;
       };
 };
type RefinedPlayerSquads = 
 vec record {
       Key;
       RefinedPlayerSquad__1;
     };
type RefinedPlayerSquad__1 = 
 record {
   cap: Key;
   creation_time: int;
   formation: text;
   hasParticipated: bool;
   matchId: Key;
   name: text;
   players: vec record {
                  Key;
                  PlayerS;
                  bool;
                };
   points: RPoints;
   rank: nat;
   userId: Key;
   viceCap: Key;
 };
type RefinedPlayerSquadRankings = 
 vec record {
       Key;
       RefinedPlayerSquadRanking;
     };
type RefinedPlayerSquadRanking__1 = 
 record {
   creation_time: int;
   matchId: Key;
   name: text;
   points: RPoints;
   rank: nat;
   userId: Key;
 };
type RefinedPlayerSquadRanking = 
 record {
   creation_time: int;
   matchId: Key;
   name: text;
   points: RPoints;
   rank: nat;
   userId: Key;
 };
type RefinedPlayerSquad = 
 record {
   cap: Key;
   creation_time: int;
   formation: text;
   hasParticipated: bool;
   matchId: Key;
   name: text;
   players: vec record {
                  Key;
                  PlayerS;
                  bool;
                };
   points: RPoints;
   rank: nat;
   userId: Key;
   viceCap: Key;
 };
type RefinedMatch = 
 record {
   awayScore: nat;
   awayTeam: record {
               Key;
               opt Team__1;
             };
   homeScore: nat;
   homeTeam: record {
               Key;
               opt Team__1;
             };
   location: text;
   providerId: MonkeyId;
   seasonId: Key;
   status: MatchStatus;
   time: int;
 };
type RawPlayerSquads = 
 vec record {
       Key;
       RawPlayerSquad;
     };
type RawPlayerSquad = 
 record {
   cap: Key;
   creation_time: int;
   formation: text;
   hasParticipated: bool;
   matchId: Key;
   matchName: text;
   matchTime: int;
   name: text;
   points: RPoints;
   rank: nat;
   userId: Key;
   viceCap: Key;
 };
type RankPlayerSquad = 
 record {
   cap: Key;
   creation_time: int;
   formation: text;
   hasParticipated: bool;
   matchId: Key;
   name: text;
   players: vec record {
                  Key;
                  PlayerS;
                  bool;
                };
   points: RPoints;
   rank: nat;
   ranks: vec record {
                Key;
                nat;
              };
   userId: Key;
   viceCap: Key;
 };
type RTournamentMatches = vec RTournamentMatch;
type RTournamentMatch = 
 record {
   awayScore: nat;
   awayTeam: Key;
   homeScore: nat;
   homeTeam: Key;
   id: Key;
   isRewardable: bool;
   location: text;
   providerId: MonkeyId;
   seasonId: Key;
   status: MatchStatus;
   time: int;
   tournamentId: Key;
   tournamentName: text;
 };
type RPoints__1 = int;
type RPoints = int;
type RMatch = 
 record {
   awayScore: nat;
   awayTeam: Key;
   homeScore: nat;
   homeTeam: Key;
   id: Key;
   location: text;
   providerId: MonkeyId;
   seasonId: Key;
   status: MatchStatus;
   time: int;
 };
type RMVPSTournamentMatchsList = 
 record {
   matches: RMVPSTournamentMatchs;
   total: nat;
 };
type RMVPSTournamentMatchs = vec RMVPSTournamentMatch;
type RMVPSTournamentMatch = 
 record {
   awayScore: nat;
   awayTeam: record {
               Key;
               opt Team__1;
             };
   contestWinner: opt record {
                        Key;
                        User__1;
                      };
   homeScore: nat;
   homeTeam: record {
               Key;
               opt Team__1;
             };
   location: text;
   matchId: Key;
   mvps: opt record {
               Key;
               MVPSPlayers__1;
             };
   providerId: MonkeyId;
   seasonId: Key;
   status: MatchStatus;
   time: int;
 };
type RContestTypes = vec RContestType;
type RContestType = 
 record {
   color: text;
   entryFee: nat;
   id: text;
   isActive: bool;
   name: text;
   status: text;
   time: int;
 };
type Position__1 = 
 variant {
   defender;
   forward;
   goalKeeper;
   midfielder;
 };
type Position = 
 variant {
   defender;
   forward;
   goalKeeper;
   midfielder;
 };
type Points = 
 record {
   cards: Cards;
   dribbles: Dribbles;
   duels: Duels;
   fouls: Fouls;
   goals: Goals;
   other: Other;
   passing: Passing;
   shots: Shots;
 };
type Players = 
 vec record {
       Key;
       Player__1;
     };
type Player__1 = 
 record {
   active: bool;
   country: text;
   fantasyPrice: nat;
   isPlaying: bool;
   isSub: bool;
   name: text;
   number: nat;
   photo: text;
   points: opt RPoints;
   position: Position;
   providerId: MonkeyId;
   teamId: Key;
 };
type PlayerStatsWithName = 
 record {
   matchId: Key;
   name: text;
   playerId: Key;
   rating: text;
   stats:
    record {
      cards: Cards;
      dribbles: Dribbles;
      duels: Duels;
      fouls: Fouls;
      goals: Goals;
      other: Other;
      passing: Passing;
      shots: Shots;
    };
 };
type PlayerStats = 
 record {
   matchId: Key;
   playerId: Key;
   rating: text;
   stats:
    record {
      cards: Cards;
      dribbles: Dribbles;
      duels: Duels;
      fouls: Fouls;
      goals: Goals;
      other: Other;
      passing: Passing;
      shots: Shots;
    };
 };
type PlayerSquads = 
 vec record {
       Key;
       PlayerSquad__1;
     };
type PlayerSquad__1 = 
 record {
   cap: Key;
   creation_time: int;
   formation: text;
   hasParticipated: bool;
   matchId: Key;
   name: text;
   players: vec record {
                  Key;
                  bool;
                };
   points: RPoints;
   rank: nat;
   userId: Key;
   viceCap: Key;
 };
type PlayerSquad = 
 record {
   cap: Key;
   creation_time: int;
   formation: text;
   hasParticipated: bool;
   matchId: Key;
   name: text;
   players: vec record {
                  Key;
                  bool;
                };
   points: RPoints;
   rank: nat;
   userId: Key;
   viceCap: Key;
 };
type PlayerS = 
 record {
   active: bool;
   country: text;
   fantasyPrice: nat;
   isPlaying: bool;
   isSub: bool;
   name: text;
   number: nat;
   photo: text;
   points: opt RPoints;
   position: Position;
   providerId: MonkeyId;
   teamId: Key;
 };
type PlayerCount = 
 record {
   d: int;
   f: int;
   g: int;
   m: int;
 };
type Player = 
 record {
   active: bool;
   country: text;
   fantasyPrice: nat;
   isPlaying: bool;
   isSub: bool;
   name: text;
   number: nat;
   photo: text;
   points: opt RPoints;
   position: Position;
   providerId: MonkeyId;
   teamId: Key;
 };
type Passing = 
 record {
   accurate_passes: int;
   crosses_accuracy: int;
   key_passes: int;
   passes: int;
   passes_accuracy: int;
   total_crosses: int;
 };
type Participants = 
 vec record {
       Key;
       Participant;
     };
type Participant = 
 record {
   contestId: Key;
   isRewarded: bool;
   rank: nat;
   squadId: Key;
   transactionId: Key;
   userId: Key;
 };
type Other = 
 record {
   aerials_won: int;
   blocks: int;
   clearances: int;
   dispossesed: int;
   hit_woodwork: int;
   inside_box_saves: int;
   interceptions: int;
   minutes_played: int;
   offsides: int;
   pen_committed: int;
   pen_missed: int;
   pen_saved: int;
   pen_scored: int;
   pen_won: int;
   punches: int;
   saves: int;
   tackles: int;
 };
type MonkeyId = text;
type MeAsTopPlayer = 
 record {
   assets: UserAssets;
   email: text;
   joiningDate: int;
   name: text;
   rank: nat;
   role: Role;
 };
type Matches = 
 vec record {
       Key;
       Match__1;
     };
type Match__1 = 
 record {
   awayScore: nat;
   awayTeam: Key;
   homeScore: nat;
   homeTeam: Key;
   location: text;
   providerId: MonkeyId;
   seasonId: Key;
   status: MatchStatus;
   time: int;
 };
type MatchStatus__1 = text;
type MatchStatus = text;
type MatchScore = 
 record {
   awayScore: nat;
   homeScore: nat;
   id: Key;
   status: MatchStatus;
 };
type MatchContests = 
 vec record {
       Key;
       MatchContest;
     };
type MatchContest = 
 record {
   awayScore: nat;
   awayTeamName: text;
   creatorUserId: Key;
   entryFee: nat;
   firstPrize: nat;
   homeScore: nat;
   homeTeamName: text;
   isDistributed: bool;
   matchId: Key;
   matchName: text;
   maxCap: nat;
   minCap: nat;
   name: text;
   paymentMethod: Key;
   providerId: MonkeyId;
   rewardDistribution: vec ContestRewardDistribution;
   rules: text;
   slots: nat;
   slotsUsed: nat;
   teamsPerUser: nat;
   winner: opt Key;
 };
type Match = 
 record {
   awayScore: nat;
   awayTeam: Key;
   homeScore: nat;
   homeTeam: Key;
   location: text;
   providerId: MonkeyId;
   seasonId: Key;
   status: MatchStatus;
   time: int;
 };
type MVPSPlayers__1 = 
 record {
   name: text;
   number: int;
   photo: text;
 };
type MVPSPlayers = 
 record {
   name: text;
   number: int;
   photo: text;
 };
type ListPlayerSquads = 
 vec record {
       Key;
       ListPlayerSquad;
     };
type ListPlayerSquad = 
 record {
   cap: Key;
   creation_time: int;
   formation: text;
   hasParticipated: bool;
   joinedContestsName: vec text;
   matchId: Key;
   name: text;
   points: RPoints;
   rank: nat;
   userId: Key;
   viceCap: Key;
 };
type Key__1 = text;
type Key = text;
type JoinedTeams = 
 record {
   awayScore: nat;
   awayTeamLogo: text;
   awayTeamName: text;
   contestId: Key;
   contestName: text;
   homeScore: nat;
   homeTeamLogo: text;
   homeTeamName: text;
   leagueName: text;
   matchId: Key;
   matchTime: int;
   rank: nat;
   squadId: Key;
   squadName: text;
 };
type InputMatch = 
 record {
   awayScore: nat;
   awayTeamName: text;
   homeScore: nat;
   homeTeamName: text;
   id: text;
   location: text;
   providerId: MonkeyId;
   seasonId: Key;
   status: MatchStatus;
   time: int;
 };
type Icrc1Tokens = nat;
type Icrc1Timestamp = nat64;
type Icrc1BlockIndex = nat;
type IUser = 
 record {
   email: text;
   name: text;
 };
type ITournament = 
 record {
   country: text;
   description: text;
   endDate: int;
   id: Key;
   name: text;
   providerId: MonkeyId;
   startDate: int;
 };
type ITeamWithPlayers = 
 record {
   id: text;
   logo: text;
   name: text;
   players: vec IPlayer;
   providerId: MonkeyId;
   seasonId: Key;
   shortName: text;
 };
type ITeam = 
 record {
   id: text;
   logo: text;
   name: text;
   providerId: MonkeyId;
   seasonId: Key;
   shortName: text;
 };
type ISeason = 
 record {
   endDate: int;
   id: Key;
   providerId: MonkeyId;
   seasonName: text;
   startDate: int;
   tournamentId: Key;
 };
type IPlayer__1 = 
 record {
   country: text;
   fantasyPrice: nat;
   id: Key;
   name: text;
   number: nat;
   photo: text;
   position: Position;
   providerId: MonkeyId;
   teamId: Key;
 };
type IPlayerStatus = 
 record {
   id: Key;
   isPlaying: bool;
   isSub: bool;
 };
type IPlayerStats = 
 record {
   matchId: Key;
   playerId: Key;
   rating: text;
   stats:
    record {
      cards: Cards;
      dribbles: Dribbles;
      duels: Duels;
      fouls: Fouls;
      goals: Goals;
      other: Other;
      passing: Passing;
      shots: Shots;
    };
 };
type IPlayerSquad = 
 record {
   cap: Key;
   formation: text;
   matchId: Key;
   name: text;
   players: vec record {
                  Key;
                  bool;
                };
   viceCap: Key;
 };
type IPlayer = 
 record {
   country: text;
   fantasyPrice: nat;
   id: Key;
   name: text;
   number: nat;
   photo: text;
   position: Position;
   providerId: MonkeyId;
   teamId: Key;
 };
type IContest = 
 record {
   entryFee: nat;
   isDistributed: bool;
   matchId: Key;
   maxCap: nat;
   minCap: nat;
   name: text;
   paymentMethod: Key;
   providerId: MonkeyId;
   rewardDistribution: vec ContestRewardDistribution;
   rules: text;
   slots: nat;
   teamsPerUser: nat;
 };
type IAdminSetting = 
 record {
   settingName: text;
   settingType: text;
   settingValue: text;
 };
type HttpResponsePayload = 
 record {
   body: vec nat8;
   headers: vec HttpHeader;
   status: nat;
 };
type HttpHeader = 
 record {
   name: text;
   value: text;
 };
type Goals = 
 record {
   assists: int;
   conceded: int;
   owngoals: int;
   scored: int;
   team_conceded: int;
 };
type GetProps = 
 record {
   limit: nat;
   page: nat;
   search: text;
   status: text;
 };
type Fouls = 
 record {
   committed: int;
   drawn: int;
 };
type FantasyFootball = 
 service {
   _updatePlayersStats: (vec IPlayerStats) -> (vec bool);
   addAdminSetting: (IAdminSetting) -> (bool);
   addContest: (IContest) -> (Result_2);
   addContestType: (ContestType) -> (text);
   addDefaultContestsOnMatches: () -> (Result_2);
   addLeague: (Tournament__1, Season__1, vec ITeamWithPlayers) -> () oneway;
   addMatch: (InputMatch) -> (Result_7);
   addMatchToMvpsAdmin: (Key__1) -> () oneway;
   addMatches: (vec InputMatch) ->
    (record {
       err: vec record {
                  bool;
                  text;
                };
       succ: vec record {
                   bool;
                   Match;
                 };
     });
   addNewMatches: (vec InputMatch, Key__1) ->
    (record {
       err: vec record {
                  bool;
                  text;
                };
       succ: vec record {
                   bool;
                   Match;
                 };
     });
   addParticipant: (Key__1, Key__1, int) -> (ReturnAddParticipant);
   addPlayer: (Player) -> () oneway;
   addPlayerSquad: (IPlayerSquad) -> (Result_2);
   addPlayerStats: (IPlayerStats) -> (bool);
   addPlayers: (vec IPlayer__1) -> () oneway;
   addSeason: (Season__1) -> (bool);
   addSeasons: (vec ISeason) -> (bool);
   addTeam: (Team) -> (Team);
   addTeamLogo: (Key__1, text) -> (Result_6);
   addTeams: (vec ITeam) -> (bool);
   addTournament: (Tournament__1) -> () oneway;
   addTournaments: (vec ITournament) -> (bool);
   addUser: (IUser) -> (Result);
   adminResetPlayerSquadByTeamIds: (vec Key__1) -> () oneway;
   changeAllContestNames: (record {name: text;}) -> () oneway;
   changePaymentMethod: () -> ();
   deleteAdminSetting: (text) -> (opt AdminSetting);
   finishMatch: (MatchScore) -> (Result_2);
   getAdminSetting: (text) -> (opt AdminSetting) query;
   getAdminSettings: (GetProps) -> (ReturnAdminSettings) query;
   getAdmins: () -> (Users) query;
   getAllParticipants: () -> (Participants) query;
   getAssetsOfUser: (text) -> (UserAssets__1) query;
   getBudget: () -> (opt text) query;
   getContest: (Key__1) -> (opt Contest) query;
   /// getContestNames use to get list of contest names og given ids
   ///    @param array of contestIds
   ///    @return [(id, contestname)]
   ///   *
   getContestNames: (vec Key__1) -> (vec record {
                                           text;
                                           text;
                                         }) query;
   getContestReward: () -> (opt AdminSetting) query;
   getContestTypes: (bool) -> (RContestTypes) query;
   getContestWinnerOfMatch: (Key__1) -> (opt record {
                                               Key__1;
                                               User;
                                             }) query;
   /// getContestWithMatch use to get  contest with match with contest id
   ///    @param array of contestId
   ///    @return {contest:Contest;match:RefinedMatch}
   ///   *
   getContestWithMatch: (Key__1) ->
    (opt record {
           contest: Contest;
           match: opt RefinedMatch;
         }) query;
   /// getContestsByIds use to get list of contest names og given ids
   ///    @param array of contestIds
   ///    @return [(id, Contest)]
   ///   *
   getContestsByIds: (vec Key__1) ->
    (vec
      record {
        creatorUserId: Key;
        entryFee: nat;
        id: Key__1;
        isDistributed: bool;
        matchId: Key;
        maxCap: nat;
        minCap: nat;
        name: text;
        paymentMethod: Key;
        providerId: MonkeyId;
        rewardDistribution: vec ContestRewardDistribution;
        rules: text;
        slots: nat;
        slotsUsed: nat;
        teamsPerUser: nat;
        winner: opt Key;
      }) query;
   getContestsByMatchId: (Key__1) -> (Contests) query;
   getContestsWinnerUserByMatchId: (Key__1) ->
    (opt record {
           Key__1;
           User;
         }) query;
   getDatedUpcomingMatches: (nat, nat) -> (vec Match) query;
   getDetailedMatchesContests: (GetProps) ->
    (ReturnDetailedMatchContests) query;
   getFilterdContests: (GetProps) -> (ReturnContests) query;
   getFilterdRawPlayerSquadsByMatch: (opt Key__1, opt Key__1, GetProps) ->
    (ReturnTeams) query;
   getJoinedContests: () -> (MatchContests) query;
   getJoinedMatches: (Key__1) ->
    (record {
       joinedMatches: int;
       matchesCount: int;
     }) query;
   getJoinedTeams: (GetProps) ->
    (record {
       result: vec JoinedTeams;
       total: nat;
     }) query;
   getListPlayerSquadsByMatch: (Key__1, opt Key__1) ->
    (ListPlayerSquads) query;
   getMVPSMatches: (GetProps) -> (RMVPSTournamentMatchsList) query;
   getMVPSOfmatch: (Key__1) -> (opt record {
                                      Key__1;
                                      MVPSPlayers;
                                    }) query;
   getMatch: (Key__1) -> (opt RefinedMatch) query;
   getMatches: (GetProps, opt int) -> (ReturnMatches) query;
   getMatchesByDateLimit: (nat, GetProps) -> (vec RMatch) query;
   getMatchesByTeamId: (Key__1) -> (Matches) query;
   getMatchesWithTournamentId: (GetProps, opt int, int, opt Key__1) ->
    (ReturnMatches) query;
   getPaginatedContestsByMatchId: (Key__1, GetProps) ->
    (ReturnPagContests) query;
   getParticipants: (Key__1) -> (Participants) query;
   getPlayer: (Key__1) -> (opt Player) query;
   getPlayerIdsByTeamIds: (vec Key__1) -> (vec Key__1) query;
   getPlayerPoints: (Key__1, Key__1) -> (opt RPoints__1) query;
   getPlayerSquad: (Key__1) -> (opt RankPlayerSquad) query;
   getPlayerSquadsByMatch: (Key__1) -> (RefinedPlayerSquads) query;
   getPlayerStats: (Key__1, Key__1) -> (opt PlayerStats) query;
   getPlayerStatsByMatchId: (Key__1) ->
    (vec record {
           Key__1;
           PlayerStatsWithName;
         }) query;
   getPlayersByPosition: (Position__1) -> (Result_5) query;
   getPlayersByTeamId: (Key__1) -> (Result_4) query;
   getPlayersByTeamIds: (vec Key__1) -> (Result_4) query;
   getRawMatch: (Key__1) -> (opt Match) query;
   getRawPlayerSquadsByMatch: (opt Key__1, opt Key__1) ->
    (PlayerSquads) query;
   getRewardPercentage: () -> (nat) query;
   getRewardsTable:
    (record {
       entryFee: nat;
       props: GetProps;
       slotsUsed: nat;
     }) -> (record {
              map: vec record {
                         nat;
                         nat;
                       };
              total: nat;
            });
   getSeasonByProvider: (MonkeyId, MonkeyId) -> (opt ISeason) query;
   getSeasons: (Key__1) -> (Seasons) query;
   getSeasonsN: (Key__1, GetProps) -> (ReturnSeasons) query;
   getSquadWithPoints: (Key__1) -> (opt RefinedPlayerSquad) query;
   getStatsSystem: () -> (Points);
   getTeamById: (Key__1) -> (opt Team) query;
   getTeamByName: (text) -> (opt record {
                                   Key__1;
                                   Team;
                                 }) query;
   getTeamsBySeason: (Key__1) -> (Result_3) query;
   getTeamsByTournament: (Key__1) -> (Result_3) query;
   getTopPlayers: (record {
                     limit: nat;
                     page: nat;
                     search: text;
                   }) -> (record {
                            players: TopPlayers;
                            total: nat;
                          }) query;
   getTournamentByProvider: (MonkeyId) -> (opt ITournament) query;
   getTournaments: () -> (Tournaments) query;
   getTournamentsN: (GetProps) -> (ReturnTournaments) query;
   getUpcomingMatches: (GetProps, nat) -> (ReturnMatches) query;
   getUser: (opt text) -> (opt User) query;
   getUserRank: (Key__1) -> (opt MeAsTopPlayer) query;
   increaseContestWon: (record {
                          assetsVal: opt nat;
                          id: Key__1;
                        }) -> (bool);
   increaseParticipant: (record {
                           assetsVal: opt nat;
                           id: Key__1;
                         }) -> (bool);
   increaseRewardsWon: (record {
                          assetsVal: opt nat;
                          id: Key__1;
                        }) -> (bool);
   increaseTotalEarning: (record {
                            assetsVal: opt nat;
                            id: Key__1;
                          }) -> (bool);
   makeAdmin: (principal) -> (bool);
   nDistributeRewards: (Key__1, Key__1) -> (ReturnAddParticipant);
   nGetSquadRanking: (Key__1, GetProps) -> (ReturnRankings) query;
   postponeMatch: (Key__1, MatchStatus__1) -> (bool);
   reScheduleMatch: (Key__1, MatchStatus__1) -> (bool);
   removeContest: (Key__1) -> (opt Contest);
   resetAndPopulateMatchDateIndex: () -> ();
   testingGetMatches: () -> (Matches) query;
   testingGetPlayerSquads: () ->
    (record {
       amount: nat;
       squads: PlayerSquads;
     }) query;
   testingGetPlayersByProviderId: (MonkeyId) -> (vec record {
                                                       Key__1;
                                                       Player;
                                                     });
   testingGetRewardPercentages: () ->
    (record {
       platformPercentage: nat;
       rewardableUsersPercentage: nat;
     });
   testingGetSeasons: () -> (record {
                               amount: nat;
                               seasons: Seasons;
                             }) query;
   testingGetTeamByProviderId: (MonkeyId) -> (opt record {
                                                    Key__1;
                                                    Team;
                                                  });
   testingIncreaseMatchTime: (Key__1) -> (opt Match);
   testingRemove: () -> () oneway;
   testingStartMatch: (Key__1, nat) -> (opt Match);
   transferPlayers: (vec Transfer) -> (vec text);
   transform: (TransformArgs) -> (CanisterHttpResponsePayload) query;
   updateAdminSetting: (IAdminSetting) -> (bool);
   updateContest: (IContest, Key__1) -> (Result_2);
   updateContestType: (Key__1, ContestType) -> (opt ContestType);
   updateMatchScore: (MatchScore) -> (bool);
   updateMatchStatus: (MatchStatus__1, Key__1) -> (bool);
   updatePlayerPrices: (vec record {
                              fantasyPrice: nat;
                              id: Key__1;
                            }) -> (bool);
   updatePlayerSquad: (Key__1, IPlayerSquad) -> (Result_1);
   updatePlayerStatus: (vec IPlayerStatus) -> (vec bool);
   updatePlayersStats: (vec IPlayerStats) -> (vec bool);
   updateRanking: (Key__1) -> () oneway;
   updateStatsSysteam: (Points) -> (bool);
   updateUpcomingMatches: (vec InputMatch) ->
    (record {
       err: vec record {
                  bool;
                  text;
                };
       succ: vec record {
                   bool;
                   text;
                 };
     });
   updateUser: (IUser) -> (Result);
   whoami: () -> (text) query;
 };
type Duels = 
 record {
   total: int;
   won: int;
 };
type Dribbles = 
 record {
   attempts: int;
   dribbled_past: int;
   success: int;
 };
type DetailedMatchContests = vec DetailedMatchContest;
type DetailedMatchContest = 
 record {
   awayScore: nat;
   awayTeam: Key;
   contests: ContestArray;
   homeScore: nat;
   homeTeam: Key;
   id: Key;
   latest: bool;
   location: text;
   providerId: Key;
   seasonId: Key;
   status: MatchStatus;
   teamsCreated: nat;
   teamsJoined: nat;
   time: int;
 };
type DetailedContest = 
 record {
   creatorUserId: Key;
   entryFee: nat;
   isDistributed: bool;
   matchId: Key;
   maxCap: nat;
   minCap: nat;
   name: text;
   paymentMethod: Key;
   providerId: MonkeyId;
   rewardDistribution: vec ContestRewardDistribution;
   rules: text;
   slots: nat;
   slotsUsed: nat;
   teamsCreatedOnContest: nat;
   teamsJoinedContest: nat;
   teamsPerUser: nat;
   winner: opt Key;
 };
type Contests = 
 vec record {
       Key;
       Contest__1;
     };
type Contest__1 = 
 record {
   creatorUserId: Key;
   entryFee: nat;
   isDistributed: bool;
   matchId: Key;
   maxCap: nat;
   minCap: nat;
   name: text;
   paymentMethod: Key;
   providerId: MonkeyId;
   rewardDistribution: vec ContestRewardDistribution;
   rules: text;
   slots: nat;
   slotsUsed: nat;
   teamsPerUser: nat;
   winner: opt Key;
 };
type ContestWithFirstPrize = 
 record {
   creatorUserId: Key;
   entryFee: nat;
   firstPrize: nat;
   isDistributed: bool;
   matchId: Key;
   maxCap: nat;
   minCap: nat;
   name: text;
   paymentMethod: Key;
   providerId: MonkeyId;
   rewardDistribution: vec ContestRewardDistribution;
   rules: text;
   slots: nat;
   slotsUsed: nat;
   teamsPerUser: nat;
   winner: opt Key;
 };
type ContestType = 
 record {
   color: text;
   entryFee: nat;
   isActive: bool;
   name: text;
   status: text;
   time: int;
 };
type ContestRewardDistribution = 
 record {
   amount: int;
   from: nat;
   to: nat;
 };
type ContestArray = vec DetailedContest;
type Contest = 
 record {
   creatorUserId: Key;
   entryFee: nat;
   isDistributed: bool;
   matchId: Key;
   maxCap: nat;
   minCap: nat;
   name: text;
   paymentMethod: Key;
   providerId: MonkeyId;
   rewardDistribution: vec ContestRewardDistribution;
   rules: text;
   slots: nat;
   slotsUsed: nat;
   teamsPerUser: nat;
   winner: opt Key;
 };
type Cards = 
 record {
   redcards: int;
   yellowcards: int;
   yellowredcards: int;
 };
type CanisterHttpResponsePayload = 
 record {
   body: vec nat8;
   headers: vec HttpHeader;
   status: nat;
 };
type AdminSettings = 
 vec record {
       Key;
       AdminSetting__1;
     };
type AdminSetting__1 = 
 record {
   creation_date: int;
   last_modified_by: Key;
   modification_date: int;
   settingName: text;
   settingType: text;
   settingValue: text;
 };
type AdminSetting = 
 record {
   creation_date: int;
   last_modified_by: Key;
   modification_date: int;
   settingName: text;
   settingType: text;
   settingValue: text;
 };
service : (record {
             ckbtcCanisterID: text;
             ledgerCanisterId: text;
             transactionCanisterId: text;
           }) -> FantasyFootball
